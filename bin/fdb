#!/usr/bin/env python
"""
CREATE:

fbd make /path/to/funnel.db -k / -k /network -k /advertisable_eid -k /advertisable_eid/network -m type

COUNT:

fdb count /path/to/funnel.db -k /network:x -m pxl -m pxl,bid -m pxl,bid,imp -m cli
funnel          filter1         filter2
/network:x	X               Y
...

fdb count /path/to/funnel.db -q '/network:g=ct2+vt2 | /network:f=ct2+vt2'
query		count
/net

OPTIONS:
 -t --traildb=/path/to [default]
"""

import os
import sys
import argparse

from traildb import FunnelDB, TrailDB

def help():
    print(__doc__.strip())

def size(tdb, path, opts):
    print len(FunnelDB.load(tdb, path))

def make(tdb, path, opts):
    mask = opts.mask or []
    keys = opts.key or ('')
    fdb = FunnelDB.easy(tdb,
                        keys=[filter(None, k.split('/')) for k in keys or ()],
                        mask_field=tdb.fields.index(mask[0]) if mask else 1)
    fdb.dump(path)

def keys(tdb, path, opts):
    fdb = FunnelDB.load(tdb, path)
    for key in fdb.keys(serialize=True):
        print key

def count_families(tdb, path, opts):
    fdb = FunnelDB.load(tdb, path)
    masks = [m or '*' for m in opts.mask or [None]]
    keys = opts.key or list(fdb.keys(serialize=True))
    print '%-50s\t%s' % ('funnel', '\t'.join('%12s' % m for m in masks))
    for n, (key, mc) in enumerate(fdb.count_families(keys, masks)):
        print '%-50s\t%s' % (key, '\t'.join('%12d' % c for m, c in mc))

def count_sets(tdb, path, opts):
    fdb = FunnelDB.load(tdb, path)
    print '%-50s\t%12s' % ('query', '#')
    for query in opts.query or [None]:
        print '%-50s\t%12d' % (query, fdb.count_set(query))

def count(tdb, path, opts):
    if opts.query:
        count_sets(tdb, path, opts)
    else:
        count_families(tdb, path, opts)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--key',
                        action='append',
                        help="funnel key to include")
    parser.add_argument('-m', '--mask',
                        action='append',
                        help="mask filter to apply")
    parser.add_argument('-q', '--query',
                        action='append',
                        help="query to produce a set")
    parser.add_argument('-t', '--traildb',
                        help="the path of the traildb")
    opts, args = parser.parse_known_args(sys.argv[1:])
    cmd, args = args[0] if args else 'help', args[1:]
    if cmd == 'help':
        return help()
    path = args[0] if args else 'a.tdb/funnel.db'
    tdb = TrailDB(opts.traildb or os.path.dirname(path))
    return eval(cmd)(tdb, path, opts)

if __name__ == '__main__':
    main()